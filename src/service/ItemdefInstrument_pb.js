// source: ItemdefInstrument.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.ItemdefInstrument.InstrumentDef', null, global);
goog.exportSymbol('proto.ItemdefInstrument.InstrumentFlags', null, global);
goog.exportSymbol('proto.ItemdefInstrument.InstrumentPiece', null, global);
goog.exportSymbol('proto.ItemdefInstrument.InstrumentRegister', null, global);
goog.exportSymbol('proto.ItemdefInstrument.PitchChoiceType', null, global);
goog.exportSymbol('proto.ItemdefInstrument.SoundProductionType', null, global);
goog.exportSymbol('proto.ItemdefInstrument.TuningType', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ItemdefInstrument.InstrumentFlags = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ItemdefInstrument.InstrumentFlags, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ItemdefInstrument.InstrumentFlags.displayName = 'proto.ItemdefInstrument.InstrumentFlags';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ItemdefInstrument.InstrumentPiece = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ItemdefInstrument.InstrumentPiece, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ItemdefInstrument.InstrumentPiece.displayName = 'proto.ItemdefInstrument.InstrumentPiece';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ItemdefInstrument.InstrumentRegister = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ItemdefInstrument.InstrumentRegister, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ItemdefInstrument.InstrumentRegister.displayName = 'proto.ItemdefInstrument.InstrumentRegister';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ItemdefInstrument.InstrumentDef = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ItemdefInstrument.InstrumentDef.repeatedFields_, null);
};
goog.inherits(proto.ItemdefInstrument.InstrumentDef, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ItemdefInstrument.InstrumentDef.displayName = 'proto.ItemdefInstrument.InstrumentDef';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ItemdefInstrument.InstrumentFlags.prototype.toObject = function(opt_includeInstance) {
  return proto.ItemdefInstrument.InstrumentFlags.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ItemdefInstrument.InstrumentFlags} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ItemdefInstrument.InstrumentFlags.toObject = function(includeInstance, msg) {
  var f, obj = {
    indefinitePitch: (f = jspb.Message.getBooleanField(msg, 1)) == null ? undefined : f,
    placedAsBuilding: (f = jspb.Message.getBooleanField(msg, 2)) == null ? undefined : f,
    metalMat: (f = jspb.Message.getBooleanField(msg, 3)) == null ? undefined : f,
    stoneMat: (f = jspb.Message.getBooleanField(msg, 4)) == null ? undefined : f,
    woodMat: (f = jspb.Message.getBooleanField(msg, 5)) == null ? undefined : f,
    glassMat: (f = jspb.Message.getBooleanField(msg, 6)) == null ? undefined : f,
    ceramicMat: (f = jspb.Message.getBooleanField(msg, 7)) == null ? undefined : f,
    shellMat: (f = jspb.Message.getBooleanField(msg, 8)) == null ? undefined : f,
    boneMat: (f = jspb.Message.getBooleanField(msg, 9)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ItemdefInstrument.InstrumentFlags}
 */
proto.ItemdefInstrument.InstrumentFlags.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ItemdefInstrument.InstrumentFlags;
  return proto.ItemdefInstrument.InstrumentFlags.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ItemdefInstrument.InstrumentFlags} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ItemdefInstrument.InstrumentFlags}
 */
proto.ItemdefInstrument.InstrumentFlags.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIndefinitePitch(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPlacedAsBuilding(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMetalMat(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setStoneMat(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWoodMat(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setGlassMat(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCeramicMat(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setShellMat(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBoneMat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ItemdefInstrument.InstrumentFlags.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ItemdefInstrument.InstrumentFlags.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ItemdefInstrument.InstrumentFlags} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ItemdefInstrument.InstrumentFlags.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBool(
      6,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeBool(
      7,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeBool(
      8,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeBool(
      9,
      f
    );
  }
};


/**
 * optional bool indefinite_pitch = 1;
 * @return {boolean}
 */
proto.ItemdefInstrument.InstrumentFlags.prototype.getIndefinitePitch = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.ItemdefInstrument.InstrumentFlags.prototype.setIndefinitePitch = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 */
proto.ItemdefInstrument.InstrumentFlags.prototype.clearIndefinitePitch = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ItemdefInstrument.InstrumentFlags.prototype.hasIndefinitePitch = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool placed_as_building = 2;
 * @return {boolean}
 */
proto.ItemdefInstrument.InstrumentFlags.prototype.getPlacedAsBuilding = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.ItemdefInstrument.InstrumentFlags.prototype.setPlacedAsBuilding = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 */
proto.ItemdefInstrument.InstrumentFlags.prototype.clearPlacedAsBuilding = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ItemdefInstrument.InstrumentFlags.prototype.hasPlacedAsBuilding = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool metal_mat = 3;
 * @return {boolean}
 */
proto.ItemdefInstrument.InstrumentFlags.prototype.getMetalMat = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.ItemdefInstrument.InstrumentFlags.prototype.setMetalMat = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 */
proto.ItemdefInstrument.InstrumentFlags.prototype.clearMetalMat = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ItemdefInstrument.InstrumentFlags.prototype.hasMetalMat = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool stone_mat = 4;
 * @return {boolean}
 */
proto.ItemdefInstrument.InstrumentFlags.prototype.getStoneMat = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.ItemdefInstrument.InstrumentFlags.prototype.setStoneMat = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 */
proto.ItemdefInstrument.InstrumentFlags.prototype.clearStoneMat = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ItemdefInstrument.InstrumentFlags.prototype.hasStoneMat = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool wood_mat = 5;
 * @return {boolean}
 */
proto.ItemdefInstrument.InstrumentFlags.prototype.getWoodMat = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.ItemdefInstrument.InstrumentFlags.prototype.setWoodMat = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 */
proto.ItemdefInstrument.InstrumentFlags.prototype.clearWoodMat = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ItemdefInstrument.InstrumentFlags.prototype.hasWoodMat = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool glass_mat = 6;
 * @return {boolean}
 */
proto.ItemdefInstrument.InstrumentFlags.prototype.getGlassMat = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.ItemdefInstrument.InstrumentFlags.prototype.setGlassMat = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 */
proto.ItemdefInstrument.InstrumentFlags.prototype.clearGlassMat = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ItemdefInstrument.InstrumentFlags.prototype.hasGlassMat = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bool ceramic_mat = 7;
 * @return {boolean}
 */
proto.ItemdefInstrument.InstrumentFlags.prototype.getCeramicMat = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.ItemdefInstrument.InstrumentFlags.prototype.setCeramicMat = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 */
proto.ItemdefInstrument.InstrumentFlags.prototype.clearCeramicMat = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ItemdefInstrument.InstrumentFlags.prototype.hasCeramicMat = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional bool shell_mat = 8;
 * @return {boolean}
 */
proto.ItemdefInstrument.InstrumentFlags.prototype.getShellMat = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/** @param {boolean} value */
proto.ItemdefInstrument.InstrumentFlags.prototype.setShellMat = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 */
proto.ItemdefInstrument.InstrumentFlags.prototype.clearShellMat = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ItemdefInstrument.InstrumentFlags.prototype.hasShellMat = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional bool bone_mat = 9;
 * @return {boolean}
 */
proto.ItemdefInstrument.InstrumentFlags.prototype.getBoneMat = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/** @param {boolean} value */
proto.ItemdefInstrument.InstrumentFlags.prototype.setBoneMat = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 */
proto.ItemdefInstrument.InstrumentFlags.prototype.clearBoneMat = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ItemdefInstrument.InstrumentFlags.prototype.hasBoneMat = function() {
  return jspb.Message.getField(this, 9) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ItemdefInstrument.InstrumentPiece.prototype.toObject = function(opt_includeInstance) {
  return proto.ItemdefInstrument.InstrumentPiece.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ItemdefInstrument.InstrumentPiece} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ItemdefInstrument.InstrumentPiece.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    id: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    name: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    namePlural: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ItemdefInstrument.InstrumentPiece}
 */
proto.ItemdefInstrument.InstrumentPiece.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ItemdefInstrument.InstrumentPiece;
  return proto.ItemdefInstrument.InstrumentPiece.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ItemdefInstrument.InstrumentPiece} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ItemdefInstrument.InstrumentPiece}
 */
proto.ItemdefInstrument.InstrumentPiece.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setNamePlural(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ItemdefInstrument.InstrumentPiece.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ItemdefInstrument.InstrumentPiece.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ItemdefInstrument.InstrumentPiece} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ItemdefInstrument.InstrumentPiece.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string type = 1;
 * @return {string}
 */
proto.ItemdefInstrument.InstrumentPiece.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ItemdefInstrument.InstrumentPiece.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 */
proto.ItemdefInstrument.InstrumentPiece.prototype.clearType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ItemdefInstrument.InstrumentPiece.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string id = 2;
 * @return {string}
 */
proto.ItemdefInstrument.InstrumentPiece.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.ItemdefInstrument.InstrumentPiece.prototype.setId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 */
proto.ItemdefInstrument.InstrumentPiece.prototype.clearId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ItemdefInstrument.InstrumentPiece.prototype.hasId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.ItemdefInstrument.InstrumentPiece.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.ItemdefInstrument.InstrumentPiece.prototype.setName = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 */
proto.ItemdefInstrument.InstrumentPiece.prototype.clearName = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ItemdefInstrument.InstrumentPiece.prototype.hasName = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string name_plural = 4;
 * @return {string}
 */
proto.ItemdefInstrument.InstrumentPiece.prototype.getNamePlural = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.ItemdefInstrument.InstrumentPiece.prototype.setNamePlural = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 */
proto.ItemdefInstrument.InstrumentPiece.prototype.clearNamePlural = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ItemdefInstrument.InstrumentPiece.prototype.hasNamePlural = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ItemdefInstrument.InstrumentRegister.prototype.toObject = function(opt_includeInstance) {
  return proto.ItemdefInstrument.InstrumentRegister.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ItemdefInstrument.InstrumentRegister} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ItemdefInstrument.InstrumentRegister.toObject = function(includeInstance, msg) {
  var f, obj = {
    pitchRangeMin: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    pitchRangeMax: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ItemdefInstrument.InstrumentRegister}
 */
proto.ItemdefInstrument.InstrumentRegister.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ItemdefInstrument.InstrumentRegister;
  return proto.ItemdefInstrument.InstrumentRegister.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ItemdefInstrument.InstrumentRegister} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ItemdefInstrument.InstrumentRegister}
 */
proto.ItemdefInstrument.InstrumentRegister.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPitchRangeMin(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPitchRangeMax(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ItemdefInstrument.InstrumentRegister.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ItemdefInstrument.InstrumentRegister.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ItemdefInstrument.InstrumentRegister} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ItemdefInstrument.InstrumentRegister.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 pitch_range_min = 1;
 * @return {number}
 */
proto.ItemdefInstrument.InstrumentRegister.prototype.getPitchRangeMin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ItemdefInstrument.InstrumentRegister.prototype.setPitchRangeMin = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 */
proto.ItemdefInstrument.InstrumentRegister.prototype.clearPitchRangeMin = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ItemdefInstrument.InstrumentRegister.prototype.hasPitchRangeMin = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 pitch_range_max = 2;
 * @return {number}
 */
proto.ItemdefInstrument.InstrumentRegister.prototype.getPitchRangeMax = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.ItemdefInstrument.InstrumentRegister.prototype.setPitchRangeMax = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 */
proto.ItemdefInstrument.InstrumentRegister.prototype.clearPitchRangeMax = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ItemdefInstrument.InstrumentRegister.prototype.hasPitchRangeMax = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ItemdefInstrument.InstrumentDef.repeatedFields_ = [5,10,11,12,13,14,15,16,17,18];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ItemdefInstrument.InstrumentDef.prototype.toObject = function(opt_includeInstance) {
  return proto.ItemdefInstrument.InstrumentDef.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ItemdefInstrument.InstrumentDef} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ItemdefInstrument.InstrumentDef.toObject = function(includeInstance, msg) {
  var f, obj = {
    flags: (f = msg.getFlags()) && proto.ItemdefInstrument.InstrumentFlags.toObject(includeInstance, f),
    size: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    value: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    materialSize: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    piecesList: jspb.Message.toObjectList(msg.getPiecesList(),
    proto.ItemdefInstrument.InstrumentPiece.toObject, includeInstance),
    pitchRangeMin: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    pitchRangeMax: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f,
    volumeMbMin: (f = jspb.Message.getField(msg, 8)) == null ? undefined : f,
    volumeMbMax: (f = jspb.Message.getField(msg, 9)) == null ? undefined : f,
    soundProductionList: (f = jspb.Message.getRepeatedField(msg, 10)) == null ? undefined : f,
    soundProductionParm1List: (f = jspb.Message.getRepeatedField(msg, 11)) == null ? undefined : f,
    soundProductionParm2List: (f = jspb.Message.getRepeatedField(msg, 12)) == null ? undefined : f,
    pitchChoiceList: (f = jspb.Message.getRepeatedField(msg, 13)) == null ? undefined : f,
    pitchChoiceParm1List: (f = jspb.Message.getRepeatedField(msg, 14)) == null ? undefined : f,
    pitchChoiceParm2List: (f = jspb.Message.getRepeatedField(msg, 15)) == null ? undefined : f,
    tuningList: (f = jspb.Message.getRepeatedField(msg, 16)) == null ? undefined : f,
    tuningParmList: (f = jspb.Message.getRepeatedField(msg, 17)) == null ? undefined : f,
    registersList: jspb.Message.toObjectList(msg.getRegistersList(),
    proto.ItemdefInstrument.InstrumentRegister.toObject, includeInstance),
    description: (f = jspb.Message.getField(msg, 19)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ItemdefInstrument.InstrumentDef}
 */
proto.ItemdefInstrument.InstrumentDef.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ItemdefInstrument.InstrumentDef;
  return proto.ItemdefInstrument.InstrumentDef.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ItemdefInstrument.InstrumentDef} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ItemdefInstrument.InstrumentDef}
 */
proto.ItemdefInstrument.InstrumentDef.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ItemdefInstrument.InstrumentFlags;
      reader.readMessage(value,proto.ItemdefInstrument.InstrumentFlags.deserializeBinaryFromReader);
      msg.setFlags(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSize(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setValue(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaterialSize(value);
      break;
    case 5:
      var value = new proto.ItemdefInstrument.InstrumentPiece;
      reader.readMessage(value,proto.ItemdefInstrument.InstrumentPiece.deserializeBinaryFromReader);
      msg.addPieces(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPitchRangeMin(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPitchRangeMax(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVolumeMbMin(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVolumeMbMax(value);
      break;
    case 10:
      var value = /** @type {!proto.ItemdefInstrument.SoundProductionType} */ (reader.readEnum());
      msg.addSoundProduction(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.addSoundProductionParm1(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.addSoundProductionParm2(value);
      break;
    case 13:
      var value = /** @type {!proto.ItemdefInstrument.PitchChoiceType} */ (reader.readEnum());
      msg.addPitchChoice(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.addPitchChoiceParm1(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.addPitchChoiceParm2(value);
      break;
    case 16:
      var value = /** @type {!proto.ItemdefInstrument.TuningType} */ (reader.readEnum());
      msg.addTuning(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.addTuningParm(value);
      break;
    case 18:
      var value = new proto.ItemdefInstrument.InstrumentRegister;
      reader.readMessage(value,proto.ItemdefInstrument.InstrumentRegister.deserializeBinaryFromReader);
      msg.addRegisters(value);
      break;
    case 19:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ItemdefInstrument.InstrumentDef.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ItemdefInstrument.InstrumentDef.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ItemdefInstrument.InstrumentDef} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ItemdefInstrument.InstrumentDef.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFlags();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ItemdefInstrument.InstrumentFlags.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getPiecesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.ItemdefInstrument.InstrumentPiece.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getSoundProductionList();
  if (f.length > 0) {
    writer.writeRepeatedEnum(
      10,
      f
    );
  }
  f = message.getSoundProductionParm1List();
  if (f.length > 0) {
    writer.writeRepeatedString(
      11,
      f
    );
  }
  f = message.getSoundProductionParm2List();
  if (f.length > 0) {
    writer.writeRepeatedString(
      12,
      f
    );
  }
  f = message.getPitchChoiceList();
  if (f.length > 0) {
    writer.writeRepeatedEnum(
      13,
      f
    );
  }
  f = message.getPitchChoiceParm1List();
  if (f.length > 0) {
    writer.writeRepeatedString(
      14,
      f
    );
  }
  f = message.getPitchChoiceParm2List();
  if (f.length > 0) {
    writer.writeRepeatedString(
      15,
      f
    );
  }
  f = message.getTuningList();
  if (f.length > 0) {
    writer.writeRepeatedEnum(
      16,
      f
    );
  }
  f = message.getTuningParmList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      17,
      f
    );
  }
  f = message.getRegistersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      18,
      f,
      proto.ItemdefInstrument.InstrumentRegister.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 19));
  if (f != null) {
    writer.writeString(
      19,
      f
    );
  }
};


/**
 * optional InstrumentFlags flags = 1;
 * @return {?proto.ItemdefInstrument.InstrumentFlags}
 */
proto.ItemdefInstrument.InstrumentDef.prototype.getFlags = function() {
  return /** @type{?proto.ItemdefInstrument.InstrumentFlags} */ (
    jspb.Message.getWrapperField(this, proto.ItemdefInstrument.InstrumentFlags, 1));
};


/** @param {?proto.ItemdefInstrument.InstrumentFlags|undefined} value */
proto.ItemdefInstrument.InstrumentDef.prototype.setFlags = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.ItemdefInstrument.InstrumentDef.prototype.clearFlags = function() {
  this.setFlags(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ItemdefInstrument.InstrumentDef.prototype.hasFlags = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 size = 2;
 * @return {number}
 */
proto.ItemdefInstrument.InstrumentDef.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.ItemdefInstrument.InstrumentDef.prototype.setSize = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 */
proto.ItemdefInstrument.InstrumentDef.prototype.clearSize = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ItemdefInstrument.InstrumentDef.prototype.hasSize = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 value = 3;
 * @return {number}
 */
proto.ItemdefInstrument.InstrumentDef.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.ItemdefInstrument.InstrumentDef.prototype.setValue = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 */
proto.ItemdefInstrument.InstrumentDef.prototype.clearValue = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ItemdefInstrument.InstrumentDef.prototype.hasValue = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 material_size = 4;
 * @return {number}
 */
proto.ItemdefInstrument.InstrumentDef.prototype.getMaterialSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.ItemdefInstrument.InstrumentDef.prototype.setMaterialSize = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 */
proto.ItemdefInstrument.InstrumentDef.prototype.clearMaterialSize = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ItemdefInstrument.InstrumentDef.prototype.hasMaterialSize = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated InstrumentPiece pieces = 5;
 * @return {!Array<!proto.ItemdefInstrument.InstrumentPiece>}
 */
proto.ItemdefInstrument.InstrumentDef.prototype.getPiecesList = function() {
  return /** @type{!Array<!proto.ItemdefInstrument.InstrumentPiece>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ItemdefInstrument.InstrumentPiece, 5));
};


/** @param {!Array<!proto.ItemdefInstrument.InstrumentPiece>} value */
proto.ItemdefInstrument.InstrumentDef.prototype.setPiecesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.ItemdefInstrument.InstrumentPiece=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ItemdefInstrument.InstrumentPiece}
 */
proto.ItemdefInstrument.InstrumentDef.prototype.addPieces = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.ItemdefInstrument.InstrumentPiece, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.ItemdefInstrument.InstrumentDef.prototype.clearPiecesList = function() {
  this.setPiecesList([]);
};


/**
 * optional int32 pitch_range_min = 6;
 * @return {number}
 */
proto.ItemdefInstrument.InstrumentDef.prototype.getPitchRangeMin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.ItemdefInstrument.InstrumentDef.prototype.setPitchRangeMin = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 */
proto.ItemdefInstrument.InstrumentDef.prototype.clearPitchRangeMin = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ItemdefInstrument.InstrumentDef.prototype.hasPitchRangeMin = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional int32 pitch_range_max = 7;
 * @return {number}
 */
proto.ItemdefInstrument.InstrumentDef.prototype.getPitchRangeMax = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.ItemdefInstrument.InstrumentDef.prototype.setPitchRangeMax = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 */
proto.ItemdefInstrument.InstrumentDef.prototype.clearPitchRangeMax = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ItemdefInstrument.InstrumentDef.prototype.hasPitchRangeMax = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional int32 volume_mb_min = 8;
 * @return {number}
 */
proto.ItemdefInstrument.InstrumentDef.prototype.getVolumeMbMin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.ItemdefInstrument.InstrumentDef.prototype.setVolumeMbMin = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 */
proto.ItemdefInstrument.InstrumentDef.prototype.clearVolumeMbMin = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ItemdefInstrument.InstrumentDef.prototype.hasVolumeMbMin = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional int32 volume_mb_max = 9;
 * @return {number}
 */
proto.ItemdefInstrument.InstrumentDef.prototype.getVolumeMbMax = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.ItemdefInstrument.InstrumentDef.prototype.setVolumeMbMax = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 */
proto.ItemdefInstrument.InstrumentDef.prototype.clearVolumeMbMax = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ItemdefInstrument.InstrumentDef.prototype.hasVolumeMbMax = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * repeated SoundProductionType sound_production = 10;
 * @return {!Array<!proto.ItemdefInstrument.SoundProductionType>}
 */
proto.ItemdefInstrument.InstrumentDef.prototype.getSoundProductionList = function() {
  return /** @type {!Array<!proto.ItemdefInstrument.SoundProductionType>} */ (jspb.Message.getRepeatedField(this, 10));
};


/** @param {!Array<!proto.ItemdefInstrument.SoundProductionType>} value */
proto.ItemdefInstrument.InstrumentDef.prototype.setSoundProductionList = function(value) {
  jspb.Message.setField(this, 10, value || []);
};


/**
 * @param {!proto.ItemdefInstrument.SoundProductionType} value
 * @param {number=} opt_index
 */
proto.ItemdefInstrument.InstrumentDef.prototype.addSoundProduction = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 10, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.ItemdefInstrument.InstrumentDef.prototype.clearSoundProductionList = function() {
  this.setSoundProductionList([]);
};


/**
 * repeated string sound_production_parm1 = 11;
 * @return {!Array<string>}
 */
proto.ItemdefInstrument.InstrumentDef.prototype.getSoundProductionParm1List = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 11));
};


/** @param {!Array<string>} value */
proto.ItemdefInstrument.InstrumentDef.prototype.setSoundProductionParm1List = function(value) {
  jspb.Message.setField(this, 11, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.ItemdefInstrument.InstrumentDef.prototype.addSoundProductionParm1 = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 11, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.ItemdefInstrument.InstrumentDef.prototype.clearSoundProductionParm1List = function() {
  this.setSoundProductionParm1List([]);
};


/**
 * repeated string sound_production_parm2 = 12;
 * @return {!Array<string>}
 */
proto.ItemdefInstrument.InstrumentDef.prototype.getSoundProductionParm2List = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 12));
};


/** @param {!Array<string>} value */
proto.ItemdefInstrument.InstrumentDef.prototype.setSoundProductionParm2List = function(value) {
  jspb.Message.setField(this, 12, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.ItemdefInstrument.InstrumentDef.prototype.addSoundProductionParm2 = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 12, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.ItemdefInstrument.InstrumentDef.prototype.clearSoundProductionParm2List = function() {
  this.setSoundProductionParm2List([]);
};


/**
 * repeated PitchChoiceType pitch_choice = 13;
 * @return {!Array<!proto.ItemdefInstrument.PitchChoiceType>}
 */
proto.ItemdefInstrument.InstrumentDef.prototype.getPitchChoiceList = function() {
  return /** @type {!Array<!proto.ItemdefInstrument.PitchChoiceType>} */ (jspb.Message.getRepeatedField(this, 13));
};


/** @param {!Array<!proto.ItemdefInstrument.PitchChoiceType>} value */
proto.ItemdefInstrument.InstrumentDef.prototype.setPitchChoiceList = function(value) {
  jspb.Message.setField(this, 13, value || []);
};


/**
 * @param {!proto.ItemdefInstrument.PitchChoiceType} value
 * @param {number=} opt_index
 */
proto.ItemdefInstrument.InstrumentDef.prototype.addPitchChoice = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 13, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.ItemdefInstrument.InstrumentDef.prototype.clearPitchChoiceList = function() {
  this.setPitchChoiceList([]);
};


/**
 * repeated string pitch_choice_parm1 = 14;
 * @return {!Array<string>}
 */
proto.ItemdefInstrument.InstrumentDef.prototype.getPitchChoiceParm1List = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 14));
};


/** @param {!Array<string>} value */
proto.ItemdefInstrument.InstrumentDef.prototype.setPitchChoiceParm1List = function(value) {
  jspb.Message.setField(this, 14, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.ItemdefInstrument.InstrumentDef.prototype.addPitchChoiceParm1 = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 14, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.ItemdefInstrument.InstrumentDef.prototype.clearPitchChoiceParm1List = function() {
  this.setPitchChoiceParm1List([]);
};


/**
 * repeated string pitch_choice_parm2 = 15;
 * @return {!Array<string>}
 */
proto.ItemdefInstrument.InstrumentDef.prototype.getPitchChoiceParm2List = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 15));
};


/** @param {!Array<string>} value */
proto.ItemdefInstrument.InstrumentDef.prototype.setPitchChoiceParm2List = function(value) {
  jspb.Message.setField(this, 15, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.ItemdefInstrument.InstrumentDef.prototype.addPitchChoiceParm2 = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 15, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.ItemdefInstrument.InstrumentDef.prototype.clearPitchChoiceParm2List = function() {
  this.setPitchChoiceParm2List([]);
};


/**
 * repeated TuningType tuning = 16;
 * @return {!Array<!proto.ItemdefInstrument.TuningType>}
 */
proto.ItemdefInstrument.InstrumentDef.prototype.getTuningList = function() {
  return /** @type {!Array<!proto.ItemdefInstrument.TuningType>} */ (jspb.Message.getRepeatedField(this, 16));
};


/** @param {!Array<!proto.ItemdefInstrument.TuningType>} value */
proto.ItemdefInstrument.InstrumentDef.prototype.setTuningList = function(value) {
  jspb.Message.setField(this, 16, value || []);
};


/**
 * @param {!proto.ItemdefInstrument.TuningType} value
 * @param {number=} opt_index
 */
proto.ItemdefInstrument.InstrumentDef.prototype.addTuning = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 16, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.ItemdefInstrument.InstrumentDef.prototype.clearTuningList = function() {
  this.setTuningList([]);
};


/**
 * repeated string tuning_parm = 17;
 * @return {!Array<string>}
 */
proto.ItemdefInstrument.InstrumentDef.prototype.getTuningParmList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 17));
};


/** @param {!Array<string>} value */
proto.ItemdefInstrument.InstrumentDef.prototype.setTuningParmList = function(value) {
  jspb.Message.setField(this, 17, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.ItemdefInstrument.InstrumentDef.prototype.addTuningParm = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 17, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.ItemdefInstrument.InstrumentDef.prototype.clearTuningParmList = function() {
  this.setTuningParmList([]);
};


/**
 * repeated InstrumentRegister registers = 18;
 * @return {!Array<!proto.ItemdefInstrument.InstrumentRegister>}
 */
proto.ItemdefInstrument.InstrumentDef.prototype.getRegistersList = function() {
  return /** @type{!Array<!proto.ItemdefInstrument.InstrumentRegister>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ItemdefInstrument.InstrumentRegister, 18));
};


/** @param {!Array<!proto.ItemdefInstrument.InstrumentRegister>} value */
proto.ItemdefInstrument.InstrumentDef.prototype.setRegistersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 18, value);
};


/**
 * @param {!proto.ItemdefInstrument.InstrumentRegister=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ItemdefInstrument.InstrumentRegister}
 */
proto.ItemdefInstrument.InstrumentDef.prototype.addRegisters = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 18, opt_value, proto.ItemdefInstrument.InstrumentRegister, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.ItemdefInstrument.InstrumentDef.prototype.clearRegistersList = function() {
  this.setRegistersList([]);
};


/**
 * optional string description = 19;
 * @return {string}
 */
proto.ItemdefInstrument.InstrumentDef.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 19, ""));
};


/** @param {string} value */
proto.ItemdefInstrument.InstrumentDef.prototype.setDescription = function(value) {
  jspb.Message.setField(this, 19, value);
};


/**
 * Clears the field making it undefined.
 */
proto.ItemdefInstrument.InstrumentDef.prototype.clearDescription = function() {
  jspb.Message.setField(this, 19, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ItemdefInstrument.InstrumentDef.prototype.hasDescription = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * @enum {number}
 */
proto.ItemdefInstrument.PitchChoiceType = {
  MEMBRANE_POSITION: 0,
  SUBPART_CHOICE: 1,
  KEYBOARD: 2,
  STOPPING_FRET: 3,
  STOPPING_AGAINST_BODY: 4,
  STOPPING_HOLE: 5,
  STOPPING_HOLE_KEY: 6,
  SLIDE: 7,
  HARMONIC_SERIES: 8,
  VALVE_ROUTES_AIR: 9,
  BP_IN_BELL: 10,
  FOOT_PEDALS: 11
};

/**
 * @enum {number}
 */
proto.ItemdefInstrument.SoundProductionType = {
  PLUCKED_BY_BP: 0,
  PLUCKED: 1,
  BOWED: 2,
  STRUCK_BY_BP: 3,
  STRUCK: 4,
  VIBRATE_BP_AGAINST_OPENING: 5,
  BLOW_AGAINST_FIPPLE: 6,
  BLOW_OVER_OPENING_SIDE: 7,
  BLOW_OVER_OPENING_END: 8,
  BLOW_OVER_SINGLE_REED: 9,
  BLOW_OVER_DOUBLE_REED: 10,
  BLOW_OVER_FREE_REED: 11,
  STRUCK_TOGETHER: 12,
  SHAKEN: 13,
  SCRAPED: 14,
  FRICTION: 15,
  RESONATOR: 16,
  BAG_OVER_REED: 17,
  AIR_OVER_REED: 18,
  AIR_OVER_FREE_REED: 19,
  AIR_AGAINST_FIPPLE: 20
};

/**
 * @enum {number}
 */
proto.ItemdefInstrument.TuningType = {
  PEGS: 0,
  ADJUSTABLE_BRIDGES: 1,
  CROOKS: 2,
  TIGHTENING: 3,
  LEVERS: 4
};

goog.object.extend(exports, proto.ItemdefInstrument);
