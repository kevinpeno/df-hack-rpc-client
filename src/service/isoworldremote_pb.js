// source: isoworldremote.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.isoworldremote.BasicMaterial', null, global);
goog.exportSymbol('proto.isoworldremote.BasicShape', null, global);
goog.exportSymbol('proto.isoworldremote.ColorDefinition', null, global);
goog.exportSymbol('proto.isoworldremote.EmbarkTile', null, global);
goog.exportSymbol('proto.isoworldremote.EmbarkTileLayer', null, global);
goog.exportSymbol('proto.isoworldremote.LiquidType', null, global);
goog.exportSymbol('proto.isoworldremote.MapReply', null, global);
goog.exportSymbol('proto.isoworldremote.MapRequest', null, global);
goog.exportSymbol('proto.isoworldremote.RawNames', null, global);
goog.exportSymbol('proto.isoworldremote.TileRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.isoworldremote.ColorDefinition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.isoworldremote.ColorDefinition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.isoworldremote.ColorDefinition.displayName = 'proto.isoworldremote.ColorDefinition';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.isoworldremote.EmbarkTileLayer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.isoworldremote.EmbarkTileLayer.repeatedFields_, null);
};
goog.inherits(proto.isoworldremote.EmbarkTileLayer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.isoworldremote.EmbarkTileLayer.displayName = 'proto.isoworldremote.EmbarkTileLayer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.isoworldremote.EmbarkTile = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.isoworldremote.EmbarkTile.repeatedFields_, null);
};
goog.inherits(proto.isoworldremote.EmbarkTile, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.isoworldremote.EmbarkTile.displayName = 'proto.isoworldremote.EmbarkTile';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.isoworldremote.TileRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.isoworldremote.TileRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.isoworldremote.TileRequest.displayName = 'proto.isoworldremote.TileRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.isoworldremote.MapRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.isoworldremote.MapRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.isoworldremote.MapRequest.displayName = 'proto.isoworldremote.MapRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.isoworldremote.MapReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.isoworldremote.MapReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.isoworldremote.MapReply.displayName = 'proto.isoworldremote.MapReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.isoworldremote.RawNames = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.isoworldremote.RawNames.repeatedFields_, null);
};
goog.inherits(proto.isoworldremote.RawNames, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.isoworldremote.RawNames.displayName = 'proto.isoworldremote.RawNames';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.isoworldremote.ColorDefinition.prototype.toObject = function(opt_includeInstance) {
  return proto.isoworldremote.ColorDefinition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.isoworldremote.ColorDefinition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.isoworldremote.ColorDefinition.toObject = function(includeInstance, msg) {
  var f, obj = {
    red: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    green: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    blue: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.isoworldremote.ColorDefinition}
 */
proto.isoworldremote.ColorDefinition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.isoworldremote.ColorDefinition;
  return proto.isoworldremote.ColorDefinition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.isoworldremote.ColorDefinition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.isoworldremote.ColorDefinition}
 */
proto.isoworldremote.ColorDefinition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRed(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGreen(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBlue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.isoworldremote.ColorDefinition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.isoworldremote.ColorDefinition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.isoworldremote.ColorDefinition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.isoworldremote.ColorDefinition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * required int32 red = 1;
 * @return {number}
 */
proto.isoworldremote.ColorDefinition.prototype.getRed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.isoworldremote.ColorDefinition.prototype.setRed = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 */
proto.isoworldremote.ColorDefinition.prototype.clearRed = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.isoworldremote.ColorDefinition.prototype.hasRed = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 green = 2;
 * @return {number}
 */
proto.isoworldremote.ColorDefinition.prototype.getGreen = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.isoworldremote.ColorDefinition.prototype.setGreen = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 */
proto.isoworldremote.ColorDefinition.prototype.clearGreen = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.isoworldremote.ColorDefinition.prototype.hasGreen = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 blue = 3;
 * @return {number}
 */
proto.isoworldremote.ColorDefinition.prototype.getBlue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.isoworldremote.ColorDefinition.prototype.setBlue = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 */
proto.isoworldremote.ColorDefinition.prototype.clearBlue = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.isoworldremote.ColorDefinition.prototype.hasBlue = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.isoworldremote.EmbarkTileLayer.repeatedFields_ = [4,5,6,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.isoworldremote.EmbarkTileLayer.prototype.toObject = function(opt_includeInstance) {
  return proto.isoworldremote.EmbarkTileLayer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.isoworldremote.EmbarkTileLayer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.isoworldremote.EmbarkTileLayer.toObject = function(includeInstance, msg) {
  var f, obj = {
    matTypeTableList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    matSubtypeTableList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
    tileShapeTableList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
    tileColorTableList: jspb.Message.toObjectList(msg.getTileColorTableList(),
    proto.isoworldremote.ColorDefinition.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.isoworldremote.EmbarkTileLayer}
 */
proto.isoworldremote.EmbarkTileLayer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.isoworldremote.EmbarkTileLayer;
  return proto.isoworldremote.EmbarkTileLayer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.isoworldremote.EmbarkTileLayer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.isoworldremote.EmbarkTileLayer}
 */
proto.isoworldremote.EmbarkTileLayer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 4:
      var value = /** @type {!Array<!proto.isoworldremote.BasicMaterial>} */ (reader.readPackedEnum());
      msg.setMatTypeTableList(value);
      break;
    case 5:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setMatSubtypeTableList(value);
      break;
    case 6:
      var value = /** @type {!Array<!proto.isoworldremote.BasicShape>} */ (reader.readPackedEnum());
      msg.setTileShapeTableList(value);
      break;
    case 7:
      var value = new proto.isoworldremote.ColorDefinition;
      reader.readMessage(value,proto.isoworldremote.ColorDefinition.deserializeBinaryFromReader);
      msg.addTileColorTable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.isoworldremote.EmbarkTileLayer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.isoworldremote.EmbarkTileLayer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.isoworldremote.EmbarkTileLayer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.isoworldremote.EmbarkTileLayer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMatTypeTableList();
  if (f.length > 0) {
    writer.writePackedEnum(
      4,
      f
    );
  }
  f = message.getMatSubtypeTableList();
  if (f.length > 0) {
    writer.writePackedInt32(
      5,
      f
    );
  }
  f = message.getTileShapeTableList();
  if (f.length > 0) {
    writer.writePackedEnum(
      6,
      f
    );
  }
  f = message.getTileColorTableList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.isoworldremote.ColorDefinition.serializeBinaryToWriter
    );
  }
};


/**
 * repeated BasicMaterial mat_type_table = 4;
 * @return {!Array<!proto.isoworldremote.BasicMaterial>}
 */
proto.isoworldremote.EmbarkTileLayer.prototype.getMatTypeTableList = function() {
  return /** @type {!Array<!proto.isoworldremote.BasicMaterial>} */ (jspb.Message.getRepeatedField(this, 4));
};


/** @param {!Array<!proto.isoworldremote.BasicMaterial>} value */
proto.isoworldremote.EmbarkTileLayer.prototype.setMatTypeTableList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!proto.isoworldremote.BasicMaterial} value
 * @param {number=} opt_index
 */
proto.isoworldremote.EmbarkTileLayer.prototype.addMatTypeTable = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.isoworldremote.EmbarkTileLayer.prototype.clearMatTypeTableList = function() {
  this.setMatTypeTableList([]);
};


/**
 * repeated int32 mat_subtype_table = 5;
 * @return {!Array<number>}
 */
proto.isoworldremote.EmbarkTileLayer.prototype.getMatSubtypeTableList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 5));
};


/** @param {!Array<number>} value */
proto.isoworldremote.EmbarkTileLayer.prototype.setMatSubtypeTableList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.isoworldremote.EmbarkTileLayer.prototype.addMatSubtypeTable = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.isoworldremote.EmbarkTileLayer.prototype.clearMatSubtypeTableList = function() {
  this.setMatSubtypeTableList([]);
};


/**
 * repeated BasicShape tile_shape_table = 6;
 * @return {!Array<!proto.isoworldremote.BasicShape>}
 */
proto.isoworldremote.EmbarkTileLayer.prototype.getTileShapeTableList = function() {
  return /** @type {!Array<!proto.isoworldremote.BasicShape>} */ (jspb.Message.getRepeatedField(this, 6));
};


/** @param {!Array<!proto.isoworldremote.BasicShape>} value */
proto.isoworldremote.EmbarkTileLayer.prototype.setTileShapeTableList = function(value) {
  jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {!proto.isoworldremote.BasicShape} value
 * @param {number=} opt_index
 */
proto.isoworldremote.EmbarkTileLayer.prototype.addTileShapeTable = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.isoworldremote.EmbarkTileLayer.prototype.clearTileShapeTableList = function() {
  this.setTileShapeTableList([]);
};


/**
 * repeated ColorDefinition tile_color_table = 7;
 * @return {!Array<!proto.isoworldremote.ColorDefinition>}
 */
proto.isoworldremote.EmbarkTileLayer.prototype.getTileColorTableList = function() {
  return /** @type{!Array<!proto.isoworldremote.ColorDefinition>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.isoworldremote.ColorDefinition, 7));
};


/** @param {!Array<!proto.isoworldremote.ColorDefinition>} value */
proto.isoworldremote.EmbarkTileLayer.prototype.setTileColorTableList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.isoworldremote.ColorDefinition=} opt_value
 * @param {number=} opt_index
 * @return {!proto.isoworldremote.ColorDefinition}
 */
proto.isoworldremote.EmbarkTileLayer.prototype.addTileColorTable = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.isoworldremote.ColorDefinition, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.isoworldremote.EmbarkTileLayer.prototype.clearTileColorTableList = function() {
  this.setTileColorTableList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.isoworldremote.EmbarkTile.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.isoworldremote.EmbarkTile.prototype.toObject = function(opt_includeInstance) {
  return proto.isoworldremote.EmbarkTile.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.isoworldremote.EmbarkTile} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.isoworldremote.EmbarkTile.toObject = function(includeInstance, msg) {
  var f, obj = {
    worldX: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    worldY: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    worldZ: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    tileLayerList: jspb.Message.toObjectList(msg.getTileLayerList(),
    proto.isoworldremote.EmbarkTileLayer.toObject, includeInstance),
    currentYear: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    currentSeason: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    isValid: (f = jspb.Message.getBooleanField(msg, 7)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.isoworldremote.EmbarkTile}
 */
proto.isoworldremote.EmbarkTile.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.isoworldremote.EmbarkTile;
  return proto.isoworldremote.EmbarkTile.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.isoworldremote.EmbarkTile} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.isoworldremote.EmbarkTile}
 */
proto.isoworldremote.EmbarkTile.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWorldX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWorldY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setWorldZ(value);
      break;
    case 4:
      var value = new proto.isoworldremote.EmbarkTileLayer;
      reader.readMessage(value,proto.isoworldremote.EmbarkTileLayer.deserializeBinaryFromReader);
      msg.addTileLayer(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCurrentYear(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCurrentSeason(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsValid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.isoworldremote.EmbarkTile.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.isoworldremote.EmbarkTile.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.isoworldremote.EmbarkTile} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.isoworldremote.EmbarkTile.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeSint32(
      3,
      f
    );
  }
  f = message.getTileLayerList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.isoworldremote.EmbarkTileLayer.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeBool(
      7,
      f
    );
  }
};


/**
 * required int32 world_x = 1;
 * @return {number}
 */
proto.isoworldremote.EmbarkTile.prototype.getWorldX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.isoworldremote.EmbarkTile.prototype.setWorldX = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 */
proto.isoworldremote.EmbarkTile.prototype.clearWorldX = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.isoworldremote.EmbarkTile.prototype.hasWorldX = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 world_y = 2;
 * @return {number}
 */
proto.isoworldremote.EmbarkTile.prototype.getWorldY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.isoworldremote.EmbarkTile.prototype.setWorldY = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 */
proto.isoworldremote.EmbarkTile.prototype.clearWorldY = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.isoworldremote.EmbarkTile.prototype.hasWorldY = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required sint32 world_z = 3;
 * @return {number}
 */
proto.isoworldremote.EmbarkTile.prototype.getWorldZ = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.isoworldremote.EmbarkTile.prototype.setWorldZ = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 */
proto.isoworldremote.EmbarkTile.prototype.clearWorldZ = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.isoworldremote.EmbarkTile.prototype.hasWorldZ = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated EmbarkTileLayer tile_layer = 4;
 * @return {!Array<!proto.isoworldremote.EmbarkTileLayer>}
 */
proto.isoworldremote.EmbarkTile.prototype.getTileLayerList = function() {
  return /** @type{!Array<!proto.isoworldremote.EmbarkTileLayer>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.isoworldremote.EmbarkTileLayer, 4));
};


/** @param {!Array<!proto.isoworldremote.EmbarkTileLayer>} value */
proto.isoworldremote.EmbarkTile.prototype.setTileLayerList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.isoworldremote.EmbarkTileLayer=} opt_value
 * @param {number=} opt_index
 * @return {!proto.isoworldremote.EmbarkTileLayer}
 */
proto.isoworldremote.EmbarkTile.prototype.addTileLayer = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.isoworldremote.EmbarkTileLayer, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.isoworldremote.EmbarkTile.prototype.clearTileLayerList = function() {
  this.setTileLayerList([]);
};


/**
 * optional int32 current_year = 5;
 * @return {number}
 */
proto.isoworldremote.EmbarkTile.prototype.getCurrentYear = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.isoworldremote.EmbarkTile.prototype.setCurrentYear = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 */
proto.isoworldremote.EmbarkTile.prototype.clearCurrentYear = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.isoworldremote.EmbarkTile.prototype.hasCurrentYear = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int32 current_season = 6;
 * @return {number}
 */
proto.isoworldremote.EmbarkTile.prototype.getCurrentSeason = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.isoworldremote.EmbarkTile.prototype.setCurrentSeason = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 */
proto.isoworldremote.EmbarkTile.prototype.clearCurrentSeason = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.isoworldremote.EmbarkTile.prototype.hasCurrentSeason = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bool is_valid = 7;
 * @return {boolean}
 */
proto.isoworldremote.EmbarkTile.prototype.getIsValid = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.isoworldremote.EmbarkTile.prototype.setIsValid = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 */
proto.isoworldremote.EmbarkTile.prototype.clearIsValid = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.isoworldremote.EmbarkTile.prototype.hasIsValid = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.isoworldremote.TileRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.isoworldremote.TileRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.isoworldremote.TileRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.isoworldremote.TileRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    wantX: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    wantY: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.isoworldremote.TileRequest}
 */
proto.isoworldremote.TileRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.isoworldremote.TileRequest;
  return proto.isoworldremote.TileRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.isoworldremote.TileRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.isoworldremote.TileRequest}
 */
proto.isoworldremote.TileRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWantX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWantY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.isoworldremote.TileRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.isoworldremote.TileRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.isoworldremote.TileRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.isoworldremote.TileRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 want_x = 1;
 * @return {number}
 */
proto.isoworldremote.TileRequest.prototype.getWantX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.isoworldremote.TileRequest.prototype.setWantX = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 */
proto.isoworldremote.TileRequest.prototype.clearWantX = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.isoworldremote.TileRequest.prototype.hasWantX = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 want_y = 2;
 * @return {number}
 */
proto.isoworldremote.TileRequest.prototype.getWantY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.isoworldremote.TileRequest.prototype.setWantY = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 */
proto.isoworldremote.TileRequest.prototype.clearWantY = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.isoworldremote.TileRequest.prototype.hasWantY = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.isoworldremote.MapRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.isoworldremote.MapRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.isoworldremote.MapRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.isoworldremote.MapRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    saveFolder: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.isoworldremote.MapRequest}
 */
proto.isoworldremote.MapRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.isoworldremote.MapRequest;
  return proto.isoworldremote.MapRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.isoworldremote.MapRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.isoworldremote.MapRequest}
 */
proto.isoworldremote.MapRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSaveFolder(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.isoworldremote.MapRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.isoworldremote.MapRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.isoworldremote.MapRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.isoworldremote.MapRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string save_folder = 1;
 * @return {string}
 */
proto.isoworldremote.MapRequest.prototype.getSaveFolder = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.isoworldremote.MapRequest.prototype.setSaveFolder = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 */
proto.isoworldremote.MapRequest.prototype.clearSaveFolder = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.isoworldremote.MapRequest.prototype.hasSaveFolder = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.isoworldremote.MapReply.prototype.toObject = function(opt_includeInstance) {
  return proto.isoworldremote.MapReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.isoworldremote.MapReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.isoworldremote.MapReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    available: (f = jspb.Message.getBooleanField(msg, 1)) == null ? undefined : f,
    regionX: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    regionY: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    regionSizeX: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    regionSizeY: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    currentYear: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    currentSeason: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.isoworldremote.MapReply}
 */
proto.isoworldremote.MapReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.isoworldremote.MapReply;
  return proto.isoworldremote.MapReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.isoworldremote.MapReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.isoworldremote.MapReply}
 */
proto.isoworldremote.MapReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAvailable(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRegionX(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRegionY(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRegionSizeX(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRegionSizeY(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCurrentYear(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCurrentSeason(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.isoworldremote.MapReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.isoworldremote.MapReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.isoworldremote.MapReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.isoworldremote.MapReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeInt32(
      7,
      f
    );
  }
};


/**
 * required bool available = 1;
 * @return {boolean}
 */
proto.isoworldremote.MapReply.prototype.getAvailable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.isoworldremote.MapReply.prototype.setAvailable = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 */
proto.isoworldremote.MapReply.prototype.clearAvailable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.isoworldremote.MapReply.prototype.hasAvailable = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 region_x = 2;
 * @return {number}
 */
proto.isoworldremote.MapReply.prototype.getRegionX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.isoworldremote.MapReply.prototype.setRegionX = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 */
proto.isoworldremote.MapReply.prototype.clearRegionX = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.isoworldremote.MapReply.prototype.hasRegionX = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 region_y = 3;
 * @return {number}
 */
proto.isoworldremote.MapReply.prototype.getRegionY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.isoworldremote.MapReply.prototype.setRegionY = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 */
proto.isoworldremote.MapReply.prototype.clearRegionY = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.isoworldremote.MapReply.prototype.hasRegionY = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 region_size_x = 4;
 * @return {number}
 */
proto.isoworldremote.MapReply.prototype.getRegionSizeX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.isoworldremote.MapReply.prototype.setRegionSizeX = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 */
proto.isoworldremote.MapReply.prototype.clearRegionSizeX = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.isoworldremote.MapReply.prototype.hasRegionSizeX = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 region_size_y = 5;
 * @return {number}
 */
proto.isoworldremote.MapReply.prototype.getRegionSizeY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.isoworldremote.MapReply.prototype.setRegionSizeY = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 */
proto.isoworldremote.MapReply.prototype.clearRegionSizeY = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.isoworldremote.MapReply.prototype.hasRegionSizeY = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int32 current_year = 6;
 * @return {number}
 */
proto.isoworldremote.MapReply.prototype.getCurrentYear = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.isoworldremote.MapReply.prototype.setCurrentYear = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 */
proto.isoworldremote.MapReply.prototype.clearCurrentYear = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.isoworldremote.MapReply.prototype.hasCurrentYear = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional int32 current_season = 7;
 * @return {number}
 */
proto.isoworldremote.MapReply.prototype.getCurrentSeason = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.isoworldremote.MapReply.prototype.setCurrentSeason = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 */
proto.isoworldremote.MapReply.prototype.clearCurrentSeason = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.isoworldremote.MapReply.prototype.hasCurrentSeason = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.isoworldremote.RawNames.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.isoworldremote.RawNames.prototype.toObject = function(opt_includeInstance) {
  return proto.isoworldremote.RawNames.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.isoworldremote.RawNames} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.isoworldremote.RawNames.toObject = function(includeInstance, msg) {
  var f, obj = {
    available: (f = jspb.Message.getBooleanField(msg, 1)) == null ? undefined : f,
    inorganicList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    organicList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.isoworldremote.RawNames}
 */
proto.isoworldremote.RawNames.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.isoworldremote.RawNames;
  return proto.isoworldremote.RawNames.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.isoworldremote.RawNames} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.isoworldremote.RawNames}
 */
proto.isoworldremote.RawNames.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAvailable(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addInorganic(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addOrganic(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.isoworldremote.RawNames.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.isoworldremote.RawNames.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.isoworldremote.RawNames} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.isoworldremote.RawNames.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getInorganicList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getOrganicList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * required bool available = 1;
 * @return {boolean}
 */
proto.isoworldremote.RawNames.prototype.getAvailable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.isoworldremote.RawNames.prototype.setAvailable = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 */
proto.isoworldremote.RawNames.prototype.clearAvailable = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.isoworldremote.RawNames.prototype.hasAvailable = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated string inorganic = 2;
 * @return {!Array<string>}
 */
proto.isoworldremote.RawNames.prototype.getInorganicList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<string>} value */
proto.isoworldremote.RawNames.prototype.setInorganicList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.isoworldremote.RawNames.prototype.addInorganic = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.isoworldremote.RawNames.prototype.clearInorganicList = function() {
  this.setInorganicList([]);
};


/**
 * repeated string organic = 3;
 * @return {!Array<string>}
 */
proto.isoworldremote.RawNames.prototype.getOrganicList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<string>} value */
proto.isoworldremote.RawNames.prototype.setOrganicList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.isoworldremote.RawNames.prototype.addOrganic = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.isoworldremote.RawNames.prototype.clearOrganicList = function() {
  this.setOrganicList([]);
};


/**
 * @enum {number}
 */
proto.isoworldremote.BasicMaterial = {
  AIR: 0,
  OTHER: 1,
  INORGANIC: 2,
  LIQUID: 3,
  PLANT: 4,
  WOOD: 5
};

/**
 * @enum {number}
 */
proto.isoworldremote.LiquidType = {
  ICE: 0,
  WATER: 1,
  MAGMA: 2
};

/**
 * @enum {number}
 */
proto.isoworldremote.BasicShape = {
  NONE: 0,
  OPEN: 1,
  WALL: 3,
  FLOOR: 4,
  RAMP_UP: 5,
  RAMP_DOWN: 6
};

goog.object.extend(exports, proto.isoworldremote);
